{"version":3,"file":"shadow.cljs.devtools.client.browser.js","sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.browser/active-modules-ref","cljs.core/volatile!","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/module-loaded","name","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/socket-ref","var_args","args__6412__auto__","len__6405__auto__","i__6406__auto__","argseq__6413__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","seq34007","G__34008","cljs.core/first","cljs.core/next","msg","args","js/console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/ws-msg","temp__5455__auto__","cljs.core/deref","s","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","G__34016","G__34017","js/console.warn","shadow.cljs.devtools.client.browser/scripts-to-load","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","shadow.cljs.devtools.client.browser/goog-is-loaded?","goog.object/get","js/goog.dependencies_.written","shadow.cljs.devtools.client.browser/goog-base-rc","p__34024","map__34025","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","resource-id","output-name","src","or__5126__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/module-is-active?","module","cljs.core/contains?","shadow.cljs.devtools.client.browser/script-eval","code","node","js/document.createElement","js/document.createTextNode","js/document.body.appendChild","js/document.body.removeChild","shadow.cljs.devtools.client.browser/do-js-load","sources","seq__34033","cljs.core/seq","chunk__34034","count__34035","i__34036","map__34037","temp__5457__auto__","cljs.core/chunked-seq?","c__6057__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__34044","resource-name","js","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.browser/do-js-reload","vec__34062","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","stop-fn","stop-label","shadow.cljs.devtools.client.env/before-load","js/goog.getObjectByName","js/$CLJS","done","shadow.cljs.devtools.client.env/before-load-async","G__34067","state","shadow.cljs.devtools.client.env/after-load","start-fn","shadow.cljs.devtools.client.browser/load-sources","callback","cljs.core/empty?","G__34083","G__34086","G__34087","G__34088","G__34089","G__34090","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","res","req","content","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__34102","map__34103","shadow.cljs.devtools.client.browser/handle-build-complete","info","map__34105","compiled","warnings","iter__6008__auto__","s__34116","cljs.core/LazySeq","xs__6012__auto__","map__34133","iterys__6004__auto__","s__34118","c__6006__auto__","size__6007__auto__","b__34121","cljs.core/chunk-buffer","i__34119","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34117","cljs.core/cons","cljs.core/rest","fs__6005__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__34115","cljs.core/not","warning","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","seq__34165","chunk__34166","count__34167","i__34168","map__34171","map__34174","line","column","w","G__34173","G__34176","shadow.cljs.devtools.client.env/autoload","sources-to-get","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__34186","map__34187","rc","shadow.cljs.devtools.client.env/module-format","p__34178","map__34179","p__34241","map__34243","shadow.cljs.devtools.client.browser/handle-asset-watch","updates","seq__34245","chunk__34247","count__34248","i__34249","path","clojure.string/ends-with?","G__34251","G__34254","js/document.querySelector","new-link","G__34252","G__34255","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","goog.dom/insertSiblingAfter","goog.dom/removeNode","shadow.cljs.devtools.client.browser/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","shadow.cljs.devtools.client.browser/get-asset-root","loc","js/goog.Uri","js/document.location.href","cbp","js/CLOSURE_BASE_PATH","clojure.string/replace","shadow.cljs.devtools.client.browser/repl-error","e","js/console.error","shadow.cljs.devtools.client.env/repl-error","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__34289","map__34290","shadow.cljs.devtools.client.browser/repl-invoke","id","result","shadow.cljs.devtools.client.env/repl-call","js/eval","p__34294","map__34295","shadow.cljs.devtools.client.browser/repl-require","reload","sources-to-load","all","cljs.core/butlast","self","cljs.core/last","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__34298","map__34299","shadow.cljs.devtools.client.browser/repl-init","repl-state","cljs.core/reset!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__34305","map__34306","shadow.cljs.devtools.client.browser/repl-set-ns","ns","p__34311","map__34312","shadow.cljs.devtools.client.browser/handle-message","type","G__34314","cljs.core/Keyword","shadow.cljs.devtools.client.browser/compile","text","G__34316","G__34317","G__34318","G__34319","G__34320","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","actions","shadow.cljs.devtools.client.browser/heartbeat!","js/Date.now","js/setTimeout","shadow.cljs.devtools.client.browser/ws-connect","print-fn","cljs.core/*print-fn*","ws-url","shadow.cljs.devtools.client.env/ws-url","socket","js/WebSocket","cljs.core/vreset!","shadow.cljs.devtools.client.env/process-ws-msg","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/enabled"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require [cljs.reader :as reader]\n            [clojure.string :as str]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [goog.net.jsloader :as loader]\n            [goog.userAgent.product :as product]\n            [goog.Uri]\n            [goog.net.XhrIo :as xhr]\n            [shadow.cljs.devtools.client.env :as env]\n            [shadow.cljs.devtools.client.console]\n            ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cDEVTOOLS: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (gobj/get js/goog.dependencies_.written name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload\n  \"stops the running app, loads sources, starts app\n   stop might be async as several node APIs are async\n   start is sync since we don't need to do anything after startup finishes\"\n  [sources]\n  (let [[stop-fn stop-label]\n        (cond\n          (seq env/before-load)\n          (let [stop-fn (js/goog.getObjectByName env/before-load js/$CLJS)]\n            [(fn [done]\n               (stop-fn)\n               (done))\n             env/before-load])\n\n          (seq env/before-load-async)\n          [(js/goog.getObjectByName env/before-load-async js/$CLJS)\n           env/before-load-async]\n\n          :else\n          [(fn [done] (done))\n           nil])]\n\n    (when stop-label\n      (devtools-msg \"app shutdown\" stop-label))\n    (stop-fn\n      (fn [state]\n        (do-js-load sources)\n        (when (seq env/after-load)\n          (devtools-msg \"app start\" env/after-load))\n\n        ;; must delay loading start-fn until here, otherwise we load the old version\n        (when-let [start-fn\n                   (when (seq env/after-load)\n                     (js/goog.getObjectByName env/after-load js/$CLJS))]\n          (start-fn state))\n        ))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (when env/autoload\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (let [sources-to-get\n            (->> sources\n                 (filter\n                   (fn [{:keys [module] :as rc}]\n                     (or (= \"js\" env/module-format)\n                         (module-is-active? module))))\n                 (filter\n                   (fn [{:keys [output-name resource-id] :as src}]\n                     (or (not (src-is-loaded? src))\n                         (and (contains? compiled resource-id)\n                              ;; never reload files from jar\n                              ;; they can't be hot-swapped so the only way they get re-compiled\n                              ;; is if they have warnings, which we can't to anything about\n                              (not (:from-jar src))))))\n                 (into []))]\n\n\n        ;; FIXME: should allow reload with warnings\n        (when (and (empty? warnings)\n                   (seq sources-to-get))\n          (load-sources sources-to-get do-js-reload)\n          )))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (when-let [node (js/document.querySelector (str \"link[href^=\\\"\" path \"\\\"]\"))]\n      (let [new-link\n            (doto (js/document.createElement \"link\")\n              (.setAttribute \"rel\" \"stylesheet\")\n              (.setAttribute \"href\" (str path \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product  (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload] :as msg}]\n  (let [sources-to-load\n        (cond\n          (= :reload reload)\n          (let [all (butlast sources)\n                self (last sources)]\n            (-> (into [] (remove src-is-loaded?) all)\n                (conj self)))\n\n          (= :reload-all reload)\n          sources\n\n          :else\n          (remove src-is-loaded? sources))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :build-complete\n    (handle-build-complete msg)\n\n    :pong\n    nil\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/repl-host \":\" env/repl-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n(defn ws-connect []\n  (let [print-fn\n        cljs.core/*print-fn*\n\n        ws-url\n        (env/ws-url :browser)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        #_(set-print-fn! (fn [& args]\n                           (ws-msg {:type :repl/out\n                                    :out (into [] args)})\n                           (apply print-fn args)))\n\n        (env/process-ws-msg e handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n        (devtools-msg \"connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"disconnected!\")\n        (vreset! socket-ref nil)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]))\n\n    (js/setTimeout heartbeat! 30000)\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n  (ws-connect))\n"]}