{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.env/client-id","cljs.core/random-uuid","goog/define","shadow.cljs.devtools.client.env/get-repl-host","and__5114__auto__","shadow.cljs.devtools.client.env/use-document-host","js/goog.global.document","js/document.location.hostname","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/get-url-base","cljs.core/seq","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/get-ws-url-base","clojure.string/replace","js/Error","shadow.cljs.devtools.client.env/ws-url","client-type","cljs.core/Keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","cljs.core/name","shadow.cljs.devtools.client.env/ws-listener-url","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-print-fn","cljs.core/pr-str","shadow.cljs.devtools.client.env/repl-error","e","G__32411","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","e32416","result","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","e32417","js/console.log","cljs.core/*e","shadow.cljs.devtools.client.env/process-ws-msg","handler","*default-data-reader-fn*32418","cljs.tools.reader/*default-data-reader-fn*","tag","value","text","msg","e32419","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/console.warn"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require [goog.object :as gobj]\n            [cljs.tools.reader :as reader]\n            [clojure.string :as str]))\n\n(defonce client-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define before-load \"\")\n\n(goog-define before-load-async \"\")\n\n(goog-define after-load \"\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define repl-host \"\")\n\n(goog-define repl-port 8200)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(defn get-repl-host []\n  (if (and use-document-host js/goog.global.document)\n    js/document.location.hostname\n    repl-host))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-repl-host) \":\" repl-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [client-type]\n  {:pre [(keyword? client-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" client-id \"/\" (name client-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" client-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" client-id))\n\n(def repl-print-fn pr-str)\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n(defn process-ws-msg [e handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (let [text\n          (.-data e)\n\n          msg\n          (try\n            (reader/read-string text)\n            (catch :default e\n              (js/console.warn \"failed to parse websocket message\" text e)))]\n      (when msg\n        (handler msg))\n      )))\n\n"]}